<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

  <!--1、配置文件相关参数-->
  <context:property-placeholder location="classpath:fileupload.properties" />

  <!--配置spring mvc-->
  <!--1、开启spring mvc注解模式-->
  <!--简化配置：
      1、自动注册DefaultAnnotationHandlerMapping
          AnnotationMethodHandlerAdapter
      2、提供了一系列功能：数据绑定、数字和日期的format@NumberFormat @DateTimeFormat
      3、xml 和json默认读写支持-->
  <mvc:annotation-driven>
    <mvc:message-converters>

      <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="objectMapper">
          <bean class="com.fasterxml.jackson.databind.ObjectMapper">
            <property name="dateFormat">
              <bean class="java.text.SimpleDateFormat">
                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
              </bean>
            </property>

            <property name="serializationInclusion">
                <util:constant static-field="com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL" />
            </property>
          </bean>
        </property>
      </bean>
    </mvc:message-converters>
  </mvc:annotation-driven>

  <!--配置登录状态拦截器-->
  <mvc:interceptors>
    <mvc:interceptor>
      <!--进行拦截-->
      <mvc:mapping path="/user/**" />
      <mvc:mapping path="/order/**" />
      <mvc:mapping path="/account/**" />

      <bean id="loginInterceptor" class="interceptor.Login"></bean>
    </mvc:interceptor>
  </mvc:interceptors>

  <!--servlet mapping -->
  <!--静态资源配置 默认servlet配置
  1:加入对静态资源的处理 js gif png
  2:允许使用“/”做整体映射 -->
  <mvc:default-servlet-handler/>

  <!--配置html viewResolver-->
  <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView" />
    <property name="prefix" value="/static/html/" />
    <property name="suffix" value=".html" />
  </bean>

  <!-- springMVC上传文件时，需要配置MultipartResolver处理器 -->
  <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="defaultEncoding" value="utf-8"></property>
    <!--2M 1024*1024*2-->
    <property name="maxUploadSize" value="${maxUploadSize}"></property>
    <property name="maxInMemorySize" value="${maxInMemorySize}"></property>
    <!--resolveLazily属性启用是为了推迟文件解析，以便在UploadAction 中捕获文件大小异常-->
    <property name="resolveLazily" value="true"/>
  </bean>




  <import resource="classpath:dubbo/dubbo-consumer.xml" />

  <dubbo:annotation package="controller" />

  <context:component-scan base-package="controller" />
  <context:component-scan base-package="swagger" />

</beans>